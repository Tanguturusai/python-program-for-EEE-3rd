# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fF4f0Rxfcnoe_M77gvOC0K9VX25XiMJ0
"""

mdlkNN.NumNeighbors = 7;
import matplotlib.pyplot as plt
import numpy as np

# Simulation parameters
setpoint = 100  # Desired motor speed (RPM)
Kp = 0.1      # Proportional gain
Ki = 0.01     # Integral gain
Kd = 0.05     # Derivative gain
dt = 0.1      # Time step for simulation (seconds)
sim_time = 150 # Total simulation time (seconds)

# Controller initialization
integral = 0
previous_error = 0
motor_speed = 0  # Initial motor speed (RPM)

# Store data for plotting
time_data = []
speed_data = []

# Simulation loop
for t in np.arange(0, sim_time, dt):
    # Calculate error
    error = setpoint - motor_speed

    # PID calculations
    integral = integral + error * dt
    derivative = (error - previous_error) / dt
    output = Kp * error + Ki * integral + Kd * derivative

    # Update motor speed (simplified model)

    # In a real system, you'd have a motor model here
    motor_speed = motor_speed + output * dt

    # Store data for plotting
    time_data.append(t)
    speed_data.append(motor_speed)
    # Update previous error
    previous_error = error

# Plot the results
plt.plot(time_data, speed_data)
plt.xlabel("Time (s)")
plt.ylabel("Motor Speed (RPM)")
plt.title("DC Motor Speed Control with PID")
plt.grid(True)
plt.show()